trap.points <- ((a + 1:100*(delta.x))/2 + a + (0:99*(delta.x))/2)
a <- 0
b <- 2
n.rect <- 100
(delta.x <- (b-a)/n.rect)
################################################################################
# Week 2 HW R CODE
# CIPOLLI
# MATH 240 - SPRING 2025
################################################################################
################################################################################
# NOTES
################################################################################
#################################
# Function to integrate
#################################
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
#################################
# Testing Values
#################################
a <- 0
b <- 2
n.rect <- 100
(delta.x <- (b-a)/n.rect)
#################################
# Left Rule
#################################
left.points <- a + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
#################################
# Right Rule
#################################
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
#################################
# Midpoint Rule
#################################
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
#################################
trap.points <- ((a + 1:100*(delta.x))/2 + a + (0:99*(delta.x))/2)
(trap.area <- sum(delta.x*(integrand(trap.points))))
################################################################################
# Question 1(b) Skeleton
################################################################################
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
# Add necessary code here
}else if(method == "Right"){
# Add necessary code here
}else if(method == "Midpoint"){
# Add necessary code here
}else if(method == "Trapezoidial"){
# Add necessary code here
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
(trap.area <- sum(delta.x*(integrand(trap.points))))
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
trap.points <- ((a + 1:100*(delta.x))/2 + a + (0:99*(delta.x))/2)
(trap.area <- sum(delta.x*(integrand(trap.points))))
tarp.area = (delta_x / 2) * (integrand(a) + 2 * np.sum(integrand(x_points[1:-1])) + integrand(b))
tarp.area = (delta.x / 2) * (integrand(a) + 2 * np.sum(integrand(x_points[1:-1])) + integrand(b))
trap.area <- (delta.x / 2) * (integrand(a) + 2 * sum(integrand(x.points[2:n.rect])) + integrand(b))
trap.area <- (delta.x / 2) * (integrand(a) + 2 * sum(integrand(x.points[2:n.rect])) + integrand(b))
trap.area <- (delta.x / 2) * (integrand(a) + 2 * sum(integrand(x.points[2:n.rect])) + integrand(b))
import("pracma")
install.packages("pracma")
library(pracma)
trapz(a, b)
library(pracma)
trapz(a, b)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points+right.points)/2 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((a+b)/2 + 1:100*(delta.x))/2 + (a+b)/2 + (0:99*(delta.x))/2)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((a+b)/2 + 0:99*(delta.x)) + ((a+b)/2 + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((a+b)/2 + 0:99*(delta.x)) + ((a+b)/2 + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((a+b)/2 + 0:99*(delta.x)) + ((a+b)/2 + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
trap.points <- (((1) + 0:99*(delta.x)) + ((1) + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((1) + 0:99*(delta.x)) + ((1) + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
right.points <- 1 + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
right.points <- 0 + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
trap.points <- 1 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- ((a+b)/200 + 0:99*(delta.x)) + ((a+b)/200 + 1:100*(delta.x))
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- ((a+b)/200 + 0:99*(delta.x)) + ((a+b)/200 + 1:100*(delta.x))
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- ((left.points)/100+(right.points)/100)/2
trap.points <- ((left.points)/100+(right.points)/100)/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points+right.points)/200
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points+right.points)/200
(trap.area <- sum(delta.x*(integrand(trap.points))))
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
#################################
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
#################################
trap.points <- (left.points+right.points)/200 1:100*(delta.x)
trap.points <- (left.points+right.points)/200 + 1:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points+right.points)/200 + 1:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points+right.points)/200 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points+right.points)/200 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
left.points <- a + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
left.points <- a + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
trap.points <- (left.points+right.points)/200 + 1:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points+right.points)/200 + 1:99*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points-right.points)/200 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (left.points-right.points)/200 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (right.points-left.points)/200 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (right.points-left.points)/200 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (right.points-left.points)/100 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (right.points-left.points)/100 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (right.points-left.points)/100 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (right.points+left.points)/200 + 0:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (right.points+left.points)/200
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (right.points+left.points)/200
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- 1/200 + 0:99*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- 1/200 + 0:99*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- 1/200 + 1:100*(delta.x)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (1/2(a+b))*(1/n.rect(a+b)) + 1:100*(delta.x)
trap.points <- (1/2(a+b))*(1/100(a+b)) + 1:100*(delta.x)
trap.points <- (1/2(a+b))*(1/n.rect(a+b)) + 1:100*(delta.x)
trap.points <- (1/2(a+b))+(1/n.rect(a+b)) + 1:100*(delta.x)
trap.points <- (1/2(a+b))*((1/n.rect)(a+b)) + 1:100*(delta.x)
trap.points <- (1/2(a+b))*((1/n.rect)(a+b)) + 1:100*(delta.x)
trap.points <- (1/2(a+b))*((1/n.rect)(a+b)) + 1:100*(delta.x)
trap.points <- (1/2(a+b))*((1/n.rect)(a+b)) + 1:100*(delta.x)
#################################
trap.points <- (1/2(a+b))*((1/n.rect)(a+b))
trap.points <- (1/2*(a+b))*((1/n.rect)(a+b))
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
trap.points <- ((1/2)(a+b))/100
trap.points <- ((1/2)(a+b))/100
trap.points <- (left.points+right.points)/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
#################################
trap.points <- ((1/2)(1))/100
trap.points <- 1/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- 1/2*(a+b)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (1/2*(a+b))/100
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((1/2)*(a+b))/100)
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- ((((1/2)*(a+b))/100) + 0:99*(delta.x))
trap.points <- ((((1/2)*(a+b))/100) + 0:99*(delta.x))
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 0:99*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:00*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:00*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
left.points <- a + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
left.points <- 2 + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
left.points <- a + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
return(f)
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
print(f)
print(f)
integrand <- function(x){
f <- 7* x^2
return(f)
}
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
(right.area <- sum(delta.x*(integrand(right.points))))
(trap.area <- sum(delta.x*(integrand(trap.points))))
(trap.area <- sum(delta.x*(integrand(trap.points))))
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:00*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:100*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
trap.points <- (((((1/2)*(a+b))/100) + 0:99*(delta.x))
+ ((((1/2)*(a+b))/100) + 1:00*(delta.x)))/2
(trap.area <- sum(delta.x*(integrand(trap.points))))
